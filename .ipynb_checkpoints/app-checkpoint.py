import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph, Table, TableStyle, Spacer

# --- Custom CSS for light sidebar ---
st.markdown(
    """
    <style>
    /* Light pastel sidebar */
    [data-testid="stSidebar"] {
        background: #f9f9f9;
        color: #222222;
        padding: 20px;
    }
    /* Main page style */
    .css-1d391kg {
        background-color: #ffffff;
        color: #333333;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    /* Header style */
    .css-1v0mbdj h1 {
        color: #3a7ca5;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

st.title("ðŸŽ“ Student Marks Analyzer")

# Sidebar for data input
st.sidebar.header("Upload or Enter Data")

upload_option = st.sidebar.radio("Choose Input Method:", ["Upload CSV", "Manual Input"])

if upload_option == "Upload CSV":
    uploaded_file = st.sidebar.file_uploader("Upload CSV file with columns: Name, Subject, Marks", type=["csv"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
else:
    st.sidebar.write("Enter student marks manually")
    names = st.sidebar.text_area("Enter student names (comma separated)", "Alice, Bob, Charlie")
    subjects = st.sidebar.text_area("Enter subjects (comma separated)", "Math, English, Science")
    
    if names and subjects:
        names_list = [n.strip() for n in names.split(",")]
        subjects_list = [s.strip() for s in subjects.split(",")]
        
        data = []
        for name in names_list:
            row = [name]
            for subject in subjects_list:
                val = st.sidebar.number_input(f"Marks for {name} in {subject}", min_value=0, max_value=100, step=1, key=f"{name}_{subject}")
                row.append(val)
            data.append(row)
        
        cols = ["Name"] + subjects_list
        df = pd.DataFrame(data, columns=cols)

if 'df' in locals() or 'df' in globals():
    st.header("Uploaded Data")
    st.dataframe(df)
    
    # Basic stats
    st.subheader("Summary Statistics")
    marks_only = df.iloc[:, 1:]
    st.write(marks_only.describe().T)

    # Plotting average marks per subject
    avg_marks = marks_only.mean().sort_values(ascending=False)
    st.subheader("Average Marks per Subject")
    fig, ax = plt.subplots()
    avg_marks.plot(kind='bar', color="#5DADE2", ax=ax)
    ax.set_ylabel("Average Marks")
    ax.set_ylim(0, 100)
    st.pyplot(fig)
    
    # Plotting average marks per student
    st.subheader("Average Marks per Student")
    df['Average'] = marks_only.mean(axis=1)
    fig2, ax2 = plt.subplots()
    df.plot(kind='bar', x='Name', y='Average', legend=False, color="#58D68D", ax=ax2)
    ax2.set_ylabel("Average Marks")
    ax2.set_ylim(0, 100)
    st.pyplot(fig2)
    
    # Generate PDF Report
    def create_pdf(dataframe):
        buffer = BytesIO()
        c = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter
        
        styles = getSampleStyleSheet()
        styleN = styles['Normal']
        styleH = styles['Heading1']
        
        c.setTitle("Student Marks Report")
        
        # Title
        c.setFont("Helvetica-Bold", 20)
        c.setFillColor(colors.HexColor("#3a7ca5"))
        c.drawCentredString(width / 2.0, height - 50, "Student Marks Report")
        
        # Spacer
        y = height - 80
        
        # Table data
        data = [dataframe.columns.to_list()] + dataframe.values.tolist()
        
        table = Table(data, colWidths=[100] + [70]*(len(dataframe.columns)-1))
        table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#5DADE2")),
            ('TEXTCOLOR', (0,0), (-1,0), colors.white),
            ('ALIGN',(0,0),(-1,-1),'CENTER'),
            ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
            ('FONTSIZE', (0,0), (-1,0), 12),
            ('BOTTOMPADDING', (0,0), (-1,0), 8),
            ('BACKGROUND', (0,1), (-1,-1), colors.whitesmoke),
            ('GRID', (0,0), (-1,-1), 1, colors.grey),
        ]))
        
        # Build the table into PDF
        table.wrapOn(c, width, height)
        table.drawOn(c, 30, y - 20*len(data))
        
        # Footer
        c.setFont("Helvetica-Oblique", 10)
        c.setFillColor(colors.grey)
        c.drawString(30, 30, "Generated by Student Marks Analyzer")
        
        c.save()
        buffer.seek(0)
        return buffer
    
    pdf_buffer = create_pdf(df)
    
    st.download_button(
        label="ðŸ“„ Download PDF Report",
        data=pdf_buffer,
        file_name="student_marks_report.pdf",
        mime="application/pdf"
    )
else:
    st.info("Please upload a CSV file or enter marks manually to start analysis.")
